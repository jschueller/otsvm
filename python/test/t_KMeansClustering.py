#! /usr/bin/env python

import openturns as ot
import otsvm

# Instantiate one distribution object
dimension = 2
meanPoint = ot.Point(dimension, 1.0)
meanPoint[0] = 0.5
meanPoint[1] = -0.5
sigma = ot.Point(dimension, 1.0)
sigma[0] = 2.0
sigma[1] = 3.0
R = ot.CorrelationMatrix(dimension)
for i in range(1, dimension):
    R[i, i - 1] = 0.5

# Create a collection of distribution
aCollection = ot.DistributionCollection()

aCollection.add(ot.Normal(meanPoint, sigma, R))
meanPoint += ot.Point(meanPoint.getDimension(), 1.0)
aCollection.add(ot.Normal(meanPoint, sigma, R))
meanPoint += ot.Point(meanPoint.getDimension(), 1.0)
aCollection.add(ot.Normal(meanPoint, sigma, R))

# Instantiate one distribution object
distribution = ot.Mixture(aCollection)

size = 500
sample = distribution.getSample(size)

meanPoint[0] = 10
meanPoint[1] = 10

# Create a collection of distribution
aCollection = ot.DistributionCollection()

aCollection.add(ot.Normal(meanPoint, sigma, R))
meanPoint += ot.Point(meanPoint.getDimension(), 1.0)
aCollection.add(ot.Normal(meanPoint, sigma, R))
meanPoint += ot.Point(meanPoint.getDimension(), 1.0)
aCollection.add(ot.Normal(meanPoint, sigma, R))

# Instantiate one distribution object
distribution = ot.Mixture(aCollection)

sample2 = distribution.getSample(size)
sample.add(sample2)


meanPoint[0] = 3
meanPoint[1] = 12

# Create a collection of distribution
aCollection = ot.DistributionCollection()

aCollection.add(ot.Normal(meanPoint, sigma, R))
meanPoint += ot.Point(meanPoint.getDimension(), 1.0)
aCollection.add(ot.Normal(meanPoint, sigma, R))
meanPoint += ot.Point(meanPoint.getDimension(), 1.0)
aCollection.add(ot.Normal(meanPoint, sigma, R))

# Instantiate one distribution object
distribution = ot.Mixture(aCollection)

sample3 = distribution.getSample(size)
sample.add(sample3)

# Create the cloud
myCloud = ot.Cloud(sample, "blue", "fsquare", "Normal Cloud")
myGraph = ot.Graph("", "x1", "x2", True, "topright", 1.0)
myGraph.add(myCloud)

# myGraph.draw("Sample", 640, 480)

# Check that the correct files have been generated by computing their checksum
# print "bitmap=", myGraph.getBitmap()


kmeans = otsvm.KMeansClustering(sample, 3)
kmeans.run()

result = kmeans.getCluster()
print("result=", result)

sample1 = ot.Sample(0, 2)
sample2 = ot.Sample(0, 2)
sample3 = ot.Sample(0, 2)

for i in range(1500):
    if (result[i] == 1):
        sample1.add(sample[i])
    if (result[i] == 2):
        sample2.add(sample[i])
    if (result[i] == 0):
        sample3.add(sample[i])


myCloud = ot.Cloud(sample1, "blue", "fsquare", "Normal Cloud")
myCloud2 = ot.Cloud(sample2, "red", "fsquare", "Normal Cloud")
myCloud3 = ot.Cloud(sample3, "green", "fsquare", "Normal Cloud")
myGraph2 = ot.Graph("", "x1", "x2", True, "topright", 1.0)
myGraph2.add(myCloud)
myGraph2.add(myCloud2)
myGraph2.add(myCloud3)

# myGraph2.draw("Kmeans", 640, 480)

# print "bitmap=", myGraph2.getBitmap()
